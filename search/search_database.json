var tipuesearch = {"pages":[{"title":" DSCF-1224/gmsh_msh_format_fortran ","text":"DSCF-1224/gmsh_msh_format_fortran gmsh_msh_format_fortran API Documentation License Other references Warning This API documentation for gmsh_msh_format_fortran is a work in progress. gmsh_msh_format_fortran API Documentation This is the main API documentation landing page generated by FORD . License The gmsh_msh_format_fortran source code and related files and documentation are distributed under the MIT license . Other references stdlib/API-doc-FORD-file.md at master · fortran-lang/stdlib I used this file as the original.","tags":"home","url":"index.html"},{"title":"gmsh_msh_format_type – DSCF-1224/gmsh_msh_format_fortran ","text":"type, public :: gmsh_msh_format_type Derived type to hold $MeshFormat of Gmsh MSH file format. Components Type Visibility Attributes Name Initial integer(kind=c_int), private :: data_size integer(kind=c_int), private :: file_type real(kind=c_double), private :: version Source Code type :: gmsh_msh_format_type private real ( c_double ) :: version integer ( c_int ) :: file_type integer ( c_int ) :: data_size end type gmsh_msh_format_type","tags":"","url":"type/gmsh_msh_format_type.html"},{"title":"export_data_size_from_format – DSCF-1224/gmsh_msh_format_fortran","text":"private elemental function export_data_size_from_format(gmsh_msh_format) result(data_size) Exports the data-size of the read Gmsh MSH file format as a c_int value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value integer(kind=c_int) Called by proc~~export_data_size_from_format~~CalledByGraph proc~export_data_size_from_format export_data_size_from_format interface~export_data_size export_data_size interface~export_data_size->proc~export_data_size_from_format Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function export_data_size_from_format ( gmsh_msh_format ) result ( data_size ) type ( gmsh_msh_format_type ), intent ( in ) :: gmsh_msh_format integer ( c_int ) :: data_size data_size = gmsh_msh_format % data_size end function export_data_size_from_format","tags":"","url":"proc/export_data_size_from_format.html"},{"title":"export_file_type_from_format – DSCF-1224/gmsh_msh_format_fortran","text":"private elemental function export_file_type_from_format(gmsh_msh_format) result(file_type) Exports the file-type of the read Gmsh MSH file format as a c_int value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value integer(kind=c_int) Called by proc~~export_file_type_from_format~~CalledByGraph proc~export_file_type_from_format export_file_type_from_format interface~export_file_type export_file_type interface~export_file_type->proc~export_file_type_from_format Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function export_file_type_from_format ( gmsh_msh_format ) result ( file_type ) type ( gmsh_msh_format_type ), intent ( in ) :: gmsh_msh_format integer ( c_int ) :: file_type file_type = gmsh_msh_format % file_type end function export_file_type_from_format","tags":"","url":"proc/export_file_type_from_format.html"},{"title":"export_version_from_format – DSCF-1224/gmsh_msh_format_fortran","text":"private elemental function export_version_from_format(gmsh_msh_format) result(version) Exports the version of the read Gmsh MSH file format as a c_double value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value real(kind=c_double) Called by proc~~export_version_from_format~~CalledByGraph proc~export_version_from_format export_version_from_format interface~export_version export_version interface~export_version->proc~export_version_from_format Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function export_version_from_format ( gmsh_msh_format ) result ( version ) type ( gmsh_msh_format_type ), intent ( in ) :: gmsh_msh_format real ( c_double ) :: version version = gmsh_msh_format % version end function export_version_from_format","tags":"","url":"proc/export_version_from_format.html"},{"title":"check_text_line – DSCF-1224/gmsh_msh_format_fortran","text":"private  subroutine check_text_line(text_line, str, iostat, iomsg) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text_line character(len=*), intent(in) :: str integer, intent(inout) :: iostat character(len=*), intent(inout) :: iomsg Called by proc~~check_text_line~~CalledByGraph proc~check_text_line check_text_line proc~read_formatted_kernel read_formatted_kernel proc~read_formatted_kernel->proc~check_text_line proc~read_formatted read_formatted proc~read_formatted->proc~read_formatted_kernel interface~read(formatted) read(formatted) interface~read(formatted)->proc~read_formatted Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code subroutine check_text_line ( text_line , str , iostat , iomsg ) character ( * ), intent ( in ) :: text_line , str integer , intent ( inout ) :: iostat character ( * ), intent ( inout ) :: iomsg if ( trim ( text_line ) . eq . str ) return iostat = iostat_error write ( iomsg , '(A)' ) \"Failed to read \" // str end subroutine check_text_line","tags":"","url":"proc/check_text_line.html"},{"title":"read_formatted – DSCF-1224/gmsh_msh_format_fortran","text":"private  subroutine read_formatted(gmsh_msh_format, unit, iotype, v_list, iostat, iomsg) Read an $MshMeshFormat from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_format_type ), intent(inout) :: gmsh_msh_format integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Calls proc~~read_formatted~~CallsGraph proc~read_formatted read_formatted proc~read_formatted_kernel read_formatted_kernel proc~read_formatted->proc~read_formatted_kernel proc~check_text_line check_text_line proc~read_formatted_kernel->proc~check_text_line Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_formatted~~CalledByGraph proc~read_formatted read_formatted interface~read(formatted) read(formatted) interface~read(formatted)->proc~read_formatted Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code subroutine read_formatted ( gmsh_msh_format , unit , iotype , v_list , iostat , iomsg ) class ( gmsh_msh_format_type ), intent ( inout ) :: gmsh_msh_format integer , intent ( in ) :: unit character ( * ), intent ( in ) :: iotype integer , intent ( in ) :: v_list (:) integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg iomsg = '' if ( size ( v_list (:) ) . gt . 0 ) then error stop \"gmsh_msh_format_type does NOT support v_list formatters.\" end if select case ( iotype ) case ( \"LISTDIRECTED\" ) call read_formatted_kernel ( gmsh_msh_format , unit , iostat , iomsg ) case default error stop \"gmsh_msh_format_type only supports the `LISTDIRECTED` iotype.\" end select end subroutine read_formatted","tags":"","url":"proc/read_formatted.html"},{"title":"read_formatted_kernel – DSCF-1224/gmsh_msh_format_fortran","text":"private  subroutine read_formatted_kernel(gmsh_msh_format, unit, iostat, iomsg) Read an $MshMeshFormat from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_format_type ), intent(inout) :: gmsh_msh_format integer, intent(in) :: unit integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Calls proc~~read_formatted_kernel~~CallsGraph proc~read_formatted_kernel read_formatted_kernel proc~check_text_line check_text_line proc~read_formatted_kernel->proc~check_text_line Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_formatted_kernel~~CalledByGraph proc~read_formatted_kernel read_formatted_kernel proc~read_formatted read_formatted proc~read_formatted->proc~read_formatted_kernel interface~read(formatted) read(formatted) interface~read(formatted)->proc~read_formatted Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=32), private :: text_line A string for reading a line of text. The length of this string is provisional. Source Code subroutine read_formatted_kernel ( gmsh_msh_format , unit , iostat , iomsg ) class ( gmsh_msh_format_type ), intent ( inout ) :: gmsh_msh_format integer , intent ( in ) :: unit integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg !> Version: experimental !> A string for reading a line of text.<br> !> The length of this string is provisional. character ( 32 ) :: text_line read ( & ! unit = unit , & ! fmt = '(A)' , & ! iostat = iostat , & ! iomsg = iomsg & ! ) & ! text_line if ( is_iostat_eor ( iostat ) ) iostat = iostat_success if ( iostat . ne . iostat_success ) return call check_text_line ( & ! text_line = text_line , & ! str = header , & ! iostat = iostat , & ! iomsg = iomsg & ! ) read ( & ! unit = unit , & ! fmt = * , & ! iostat = iostat , & ! iomsg = iomsg & ! ) & ! gmsh_msh_format % version , & ! gmsh_msh_format % file_type , & ! gmsh_msh_format % data_size if ( iostat . ne . iostat_success ) return read ( & ! unit = unit , & ! fmt = '(A)' , & ! iostat = iostat , & ! iomsg = iomsg & ! ) & ! text_line if ( is_iostat_eor ( iostat ) ) iostat = iostat_success if ( iostat . ne . iostat_success ) return call check_text_line ( & ! text_line = text_line , & ! str = footer , & ! iostat = iostat , & ! iomsg = iomsg & ! ) end subroutine read_formatted_kernel","tags":"","url":"proc/read_formatted_kernel.html"},{"title":"export_data_size – DSCF-1224/gmsh_msh_format_fortran","text":"public interface export_data_size Exports the data-size of the read Gmsh MSH file format as a c_int value. Calls interface~~export_data_size~~CallsGraph interface~export_data_size export_data_size proc~export_data_size_from_format export_data_size_from_format interface~export_data_size->proc~export_data_size_from_format Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function export_data_size_from_format (gmsh_msh_format) result(data_size) License MIT Version experimental Exports the data-size of the read Gmsh MSH file format as a c_int value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value integer(kind=c_int)","tags":"","url":"interface/export_data_size.html"},{"title":"export_file_type – DSCF-1224/gmsh_msh_format_fortran","text":"public interface export_file_type Exports the file-type of the read Gmsh MSH file format as a c_int value. Calls interface~~export_file_type~~CallsGraph interface~export_file_type export_file_type proc~export_file_type_from_format export_file_type_from_format interface~export_file_type->proc~export_file_type_from_format Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function export_file_type_from_format (gmsh_msh_format) result(file_type) License MIT Version experimental Exports the file-type of the read Gmsh MSH file format as a c_int value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value integer(kind=c_int)","tags":"","url":"interface/export_file_type.html"},{"title":"export_version – DSCF-1224/gmsh_msh_format_fortran","text":"public interface export_version Exports the file\nVersion: experimental\nExports the version of the read Gmsh MSH file format as a c_double value. Calls interface~~export_version~~CallsGraph interface~export_version export_version proc~export_version_from_format export_version_from_format interface~export_version->proc~export_version_from_format Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function export_version_from_format (gmsh_msh_format) result(version) License MIT Version experimental Exports the version of the read Gmsh MSH file format as a c_double value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value real(kind=c_double)","tags":"","url":"interface/export_version.html"},{"title":"read(formatted) – DSCF-1224/gmsh_msh_format_fortran","text":"public interface read(formatted) Read an $MshMeshFormat from a connected formatted unit. Calls interface~~read(formatted)~~CallsGraph interface~read(formatted) read(formatted) proc~read_formatted read_formatted interface~read(formatted)->proc~read_formatted proc~read_formatted_kernel read_formatted_kernel proc~read_formatted->proc~read_formatted_kernel proc~check_text_line check_text_line proc~read_formatted_kernel->proc~check_text_line Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private  subroutine read_formatted (gmsh_msh_format, unit, iotype, v_list, iostat, iomsg) License MIT Version experimental Read an $MshMeshFormat from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_format_type ), intent(inout) :: gmsh_msh_format integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","url":"interface/read(formatted).html"},{"title":"gmsh_msh_format_fortran – DSCF-1224/gmsh_msh_format_fortran","text":"Implementation of a derived type to hold $MeshFormat of Gmsh MSH file format. Uses iso_c_binding module~~gmsh_msh_format_fortran~~UsesGraph module~gmsh_msh_format_fortran gmsh_msh_format_fortran iso_c_binding iso_c_binding module~gmsh_msh_format_fortran->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial character(len=*), private, parameter :: footer = '$EndMeshFormat' character(len=*), private, parameter :: header = '$MeshFormat' integer, private, parameter :: iostat_error = 1 iostat value when an error occurs integer, private, parameter :: iostat_success = 0 iostat value when an I/O statement executes successfully Interfaces public        interface export_data_size Exports the data-size of the read Gmsh MSH file format as a c_int value. private elemental function export_data_size_from_format (gmsh_msh_format) result(data_size) License MIT Version experimental Exports the data-size of the read Gmsh MSH file format as a c_int value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value integer(kind=c_int) public        interface export_file_type Exports the file-type of the read Gmsh MSH file format as a c_int value. private elemental function export_file_type_from_format (gmsh_msh_format) result(file_type) License MIT Version experimental Exports the file-type of the read Gmsh MSH file format as a c_int value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value integer(kind=c_int) public        interface export_version Exports the file\nVersion: experimental\nExports the version of the read Gmsh MSH file format as a c_double value. private elemental function export_version_from_format (gmsh_msh_format) result(version) License MIT Version experimental Exports the version of the read Gmsh MSH file format as a c_double value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value real(kind=c_double) public        interface read(formatted) Read an $MshMeshFormat from a connected formatted unit. private  subroutine read_formatted (gmsh_msh_format, unit, iotype, v_list, iostat, iomsg) License MIT Version experimental Read an $MshMeshFormat from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_format_type ), intent(inout) :: gmsh_msh_format integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Derived Types type, public :: gmsh_msh_format_type Derived type to hold $MeshFormat of Gmsh MSH file format. Components Type Visibility Attributes Name Initial integer(kind=c_int), private :: data_size integer(kind=c_int), private :: file_type real(kind=c_double), private :: version Functions private elemental function export_data_size_from_format (gmsh_msh_format) result(data_size) License MIT Version experimental Exports the data-size of the read Gmsh MSH file format as a c_int value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value integer(kind=c_int) private elemental function export_file_type_from_format (gmsh_msh_format) result(file_type) License MIT Version experimental Exports the file-type of the read Gmsh MSH file format as a c_int value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value integer(kind=c_int) private elemental function export_version_from_format (gmsh_msh_format) result(version) License MIT Version experimental Exports the version of the read Gmsh MSH file format as a c_double value. Arguments Type Intent Optional Attributes Name type( gmsh_msh_format_type ), intent(in) :: gmsh_msh_format Return Value real(kind=c_double) Subroutines private  subroutine check_text_line (text_line, str, iostat, iomsg) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text_line character(len=*), intent(in) :: str integer, intent(inout) :: iostat character(len=*), intent(inout) :: iomsg private  subroutine read_formatted (gmsh_msh_format, unit, iotype, v_list, iostat, iomsg) License MIT Version experimental Read an $MshMeshFormat from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_format_type ), intent(inout) :: gmsh_msh_format integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg private  subroutine read_formatted_kernel (gmsh_msh_format, unit, iostat, iomsg) License MIT Version experimental Read an $MshMeshFormat from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_format_type ), intent(inout) :: gmsh_msh_format integer, intent(in) :: unit integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","url":"module/gmsh_msh_format_fortran.html"},{"title":"gmsh_msh_format_fortran.f90 – DSCF-1224/gmsh_msh_format_fortran","text":"Source Code !> Version: experimental !> Implementation of a derived type to hold `$MeshFormat` of Gmsh MSH file format. module gmsh_msh_format_fortran use , intrinsic :: iso_c_binding , only : c_int , c_double implicit none private public :: gmsh_msh_format_type public :: read ( formatted ) public :: export_data_size public :: export_file_type public :: export_version !> Version: experimental !> Derived type to hold `$MeshFormat` of Gmsh MSH file format. type :: gmsh_msh_format_type private real ( c_double ) :: version integer ( c_int ) :: file_type integer ( c_int ) :: data_size end type gmsh_msh_format_type !> `iostat` value when an error occurs integer , parameter :: iostat_error = 1 !> `iostat` value when an I/O statement executes successfully integer , parameter :: iostat_success = 0 character ( * ), parameter :: header = '$MeshFormat' character ( * ), parameter :: footer = '$EndMeshFormat' !> Version: experimental !> Read an `$MshMeshFormat` from a connected formatted unit. interface read ( formatted ) module procedure :: read_formatted end interface read ( formatted ) !> Version: experimental !> Exports the `data-size` of the read Gmsh MSH file format as a `c_int` value. interface export_data_size module procedure :: export_data_size_from_format end interface export_data_size !> Version: experimental !> Exports the `file-type` of the read Gmsh MSH file format as a `c_int` value. interface export_file_type module procedure :: export_file_type_from_format end interface export_file_type !> Exports the file !> Version: experimental !> Exports the version of the read Gmsh MSH file format as a `c_double` value. interface export_version module procedure :: export_version_from_format end interface export_version contains !> Version: experimental !> Exports the `data-size` of the read Gmsh MSH file format as a `c_int` value. elemental function export_data_size_from_format ( gmsh_msh_format ) result ( data_size ) type ( gmsh_msh_format_type ), intent ( in ) :: gmsh_msh_format integer ( c_int ) :: data_size data_size = gmsh_msh_format % data_size end function export_data_size_from_format !> Version: experimental !> Exports the `file-type` of the read Gmsh MSH file format as a `c_int` value. elemental function export_file_type_from_format ( gmsh_msh_format ) result ( file_type ) type ( gmsh_msh_format_type ), intent ( in ) :: gmsh_msh_format integer ( c_int ) :: file_type file_type = gmsh_msh_format % file_type end function export_file_type_from_format !> Version: experimental !> Exports the version of the read Gmsh MSH file format as a `c_double` value. elemental function export_version_from_format ( gmsh_msh_format ) result ( version ) type ( gmsh_msh_format_type ), intent ( in ) :: gmsh_msh_format real ( c_double ) :: version version = gmsh_msh_format % version end function export_version_from_format !> Version: experimental !> Read an `$MshMeshFormat` from a connected formatted unit. subroutine read_formatted ( gmsh_msh_format , unit , iotype , v_list , iostat , iomsg ) class ( gmsh_msh_format_type ), intent ( inout ) :: gmsh_msh_format integer , intent ( in ) :: unit character ( * ), intent ( in ) :: iotype integer , intent ( in ) :: v_list (:) integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg iomsg = '' if ( size ( v_list (:) ) . gt . 0 ) then error stop \"gmsh_msh_format_type does NOT support v_list formatters.\" end if select case ( iotype ) case ( \"LISTDIRECTED\" ) call read_formatted_kernel ( gmsh_msh_format , unit , iostat , iomsg ) case default error stop \"gmsh_msh_format_type only supports the `LISTDIRECTED` iotype.\" end select end subroutine read_formatted !> Version: experimental !> Read an `$MshMeshFormat` from a connected formatted unit. subroutine read_formatted_kernel ( gmsh_msh_format , unit , iostat , iomsg ) class ( gmsh_msh_format_type ), intent ( inout ) :: gmsh_msh_format integer , intent ( in ) :: unit integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg !> Version: experimental !> A string for reading a line of text.<br> !> The length of this string is provisional. character ( 32 ) :: text_line read ( & ! unit = unit , & ! fmt = '(A)' , & ! iostat = iostat , & ! iomsg = iomsg & ! ) & ! text_line if ( is_iostat_eor ( iostat ) ) iostat = iostat_success if ( iostat . ne . iostat_success ) return call check_text_line ( & ! text_line = text_line , & ! str = header , & ! iostat = iostat , & ! iomsg = iomsg & ! ) read ( & ! unit = unit , & ! fmt = * , & ! iostat = iostat , & ! iomsg = iomsg & ! ) & ! gmsh_msh_format % version , & ! gmsh_msh_format % file_type , & ! gmsh_msh_format % data_size if ( iostat . ne . iostat_success ) return read ( & ! unit = unit , & ! fmt = '(A)' , & ! iostat = iostat , & ! iomsg = iomsg & ! ) & ! text_line if ( is_iostat_eor ( iostat ) ) iostat = iostat_success if ( iostat . ne . iostat_success ) return call check_text_line ( & ! text_line = text_line , & ! str = footer , & ! iostat = iostat , & ! iomsg = iomsg & ! ) end subroutine read_formatted_kernel subroutine check_text_line ( text_line , str , iostat , iomsg ) character ( * ), intent ( in ) :: text_line , str integer , intent ( inout ) :: iostat character ( * ), intent ( inout ) :: iomsg if ( trim ( text_line ) . eq . str ) return iostat = iostat_error write ( iomsg , '(A)' ) \"Failed to read \" // str end subroutine check_text_line end module gmsh_msh_format_fortran","tags":"","url":"sourcefile/gmsh_msh_format_fortran.f90.html"}]}